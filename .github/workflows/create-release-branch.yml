name: "Create: release branch"

on:
  workflow_dispatch:
    branches:
      - "develop"
    inputs:
      releasetype:
        description: "Type of release"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release-branch:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
      - name: Test dispatched branch
        id: test-dispatched-branch
        # https://github.com/marketplace/actions/enforce-branch-name
        uses: finleyfamily/action-enforce-branch-name@master
        with:
          regex: '(develop|next|legacy)'
          exclude: "main"
      - uses: actions/setup-node@main
        with:
          node-version: "18"
      - name: Save dispatched branch
        id: dispatched-branch
        run: |
          echo "Dispatched on $(git describe --all --exact-match | sed 's=heads/==' | sed 's=^develop$=main=')"
          echo "branchname=$(git describe --all --exact-match | sed 's=heads/==' | sed 's=^develop$=main=')" >> $GITHUB_OUTPUT
      - name: Update package.json with new release candidate version
        id: create-version
        run: |
          yarn version --no-git-tag-version --${{ github.event.inputs.releasetype }}
          echo "version=$(node -p -e "require('./package.json').version.split('-').shift()")" >> $GITHUB_OUTPUT
      - name: Check if version already exists as package
        id: check-version-existence
        run: |
          if [ -n "$( npm view @eccenca/gui-elements versions | grep ${{ steps.create-version.outputs.version }} )" ] ; then echo "Stop: v${{ steps.create-version.outputs.version }} is already published!" && false; else echo "Continue: v${{ steps.create-version.outputs.version }} is not published."; fi
      - name: Create release branch
        id: create-branch
        run: |
          git checkout -b release/v${{ steps.create-version.outputs.version }}
          echo "label=release/v${{ steps.create-version.outputs.version }}" >> $GITHUB_OUTPUT
      - name: Initialize mandatory git config
        # @see https://github.community/t/how-do-i-get-gh-username-based-on-actions-events/17882
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Commit version number update
        id: make-commit
        run: |
          git commit package.json --message "Prepare release v${{ steps.create-version.outputs.version }}"
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Push release branch
        run: git push origin ${{ steps.create-branch.outputs.label }}
      - name: Create pull request for release
        uses: thomaseizinger/create-pull-request@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ steps.create-branch.outputs.label }}
          base: ${{ steps.dispatched-branch.outputs.branchname }}
          title: Release v${{ steps.create-version.outputs.version }} into ${{ steps.dispatched-branch.outputs.branchname }} branch
          draft: true
          reviewers: ${{ github.actor }}
          body: |
            Created by Github workflow to create release branches.
            Merging this PR will trigger tag creation and package release.
