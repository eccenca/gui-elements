@use "sass:list";
@use "sass:color";
@use "sass:math";
@use "sass:meta";

/**
 * Always provide a list of 5 color tints.
 * If the list do not provide 5 colors then create them based on the first and last color in the list.
 */
@function eccgui-create-color-tints($colorset) {
    $colorset-steps: 5; // number of tints
    $count-colors: list.length($colorset);

    @if $count-colors == $colorset-steps {
        @return $colorset;
    }

    @if $count-colors < 1 {
        @error "Need at least 1 color to create color tints.";
    }

    @debug "Got only #{$count-colors} tints: #{$colorset}";

    $color-tint-start: rgb(
        color.red(list.nth($colorset, 1)),
        color.green(list.nth($colorset, 1)),
        color.blue(list.nth($colorset, 1))
    );
    $color-tint-end: rgb(
        color.red(list.nth($colorset, -1)),
        color.green(list.nth($colorset, -1)),
        color.blue(list.nth($colorset, -1))
    );
    $colorset-fallback: $color-tint-start;

    @for $i from 2 to $colorset-steps {
        $tint-step: color.mix($color-tint-end, $color-tint-start, 100% * math.div($i - 1, $colorset-steps - 1));
        $colorset-fallback: list.append(
            $colorset-fallback,
            rgb(color.red($tint-step), color.green($tint-step), color.blue($tint-step))
        );

        // @debug("mix #{$color-tint-start} with #{$color-tint-end} by #{math.div($i - 1, $colorset-steps - 1)} -> #{rgb(color.red($tint-step), color.green($tint-step), color.blue($tint-step))}")
    }

    $colorset-fallback: list.append($colorset-fallback, $color-tint-end);

    @debug "Create fallback with #{$colorset-steps} tints: #{$colorset-fallback}";
    @return $colorset-fallback;
}

/**
 * Create name for custom property.
 */
@function eccgui-color-name($group_or_name, $tint: null, $weight: null) {
    @if $group_or_name and $tint and $weight {
        @return "--#{$eccgui}-color-palette-#{$group_or_name}-#{$tint}-#{$weight}";
    } @else {
        @return "--#{$eccgui}-color-#{$group_or_name}";
    }
}

/**
 * Create custom property for palette color.
 */
@function eccgui-color-var($group_or_name, $tint: null, $weight: null) {
    @return var(#{eccgui-color-name($group_or_name, $tint, $weight)});
}

/**
 * Wraps the CSS color-mix function to control the color space on only one place.
 * TODO: move function to "better" place
 */
@function eccgui-color-mix($color1, $color2) {
    @return color-mix(in srgb, $color1, $color2);
}

/**
 * Similar to SCSS function rgba($color, $alpha).
 * Created to replace them easily for CSS custom properties.
 * TODO: move function to "better" place
 */
@function eccgui-color-rgba($color, $alpha) {
    @return eccgui-color-mix($color 100% * $alpha, transparent);
}

/**
 * Overwrite SCSS built-in rgba function to support colors by custom properties and CSS color methods.
 * TODO: we need to check if this is future proof, maybe this bahaviour is not planned by Dart Sass library.
 */
@function rgba($color, $alpha) {
    @if meta.type-of($color) == "color" {
        // value is SASS color value, we use SASS color functionality
        $alphacolor: color.change($color, $alpha: $alpha);

        @debug "Color value $color is not defined by CSS custom property: rgba(#{$color}, #{$alpha}) -> #{$alphacolor}";
        @return $alphacolor;
    } @else {
        // value is not a SASS color value, we use CSS color method
        @return eccgui-color-rgba($color, $alpha);
    }
}

/**
 * Base definition for colors.
 * Can be overwritten if defined before this file is included.
 * You need to define all or nothing, we currently support overwriting it only partly.
 */

$eccgui-color-palette-light: (
    "identity": (
        "brand": eccgui-create-color-tints(#fae1cc #f8cd99 #f6b966 #f4a533 #f29100),
        "accent": eccgui-create-color-tints(#e5f4fb rgb(10 103 163)),
        "text": eccgui-create-color-tints(#f8f8f8 #090909),
        "background": eccgui-create-color-tints(#fff rgb(200 200 200)),
    ),
    "semantic": (
        "info": eccgui-create-color-tints(rgb(227 242 253) rgb(21 101 192)),
        "success": eccgui-create-color-tints(rgb(232 245 233) #1b5e20),
        "warning": eccgui-create-color-tints(rgb(255 243 224) #e65100),
        "danger": eccgui-create-color-tints(#fff5f6 #b71c1c),
    ),
    "layout": (
        "yellow": eccgui-create-color-tints(#fffef1 #c6b700),
        "purple": eccgui-create-color-tints(#f3e5f5 #4a148c),
        "magenta": eccgui-create-color-tints(#ffb4d1 #a32152),
        "pink": eccgui-create-color-tints(#fbdeee #a5356e),
        "violet": eccgui-create-color-tints(#e8c9e8 #5c255c),
        "indigo": eccgui-create-color-tints(#ecd1f3 #c1a2d4 #9778b6 #6e4e98 #46247a),
        "cyan": eccgui-create-color-tints(#ccf9fe #00a0c0),
        "teal": eccgui-create-color-tints(#9addd6 #1f7a68),
        "lime": eccgui-create-color-tints(#cde0d6 #789f3f),
        // amber <- brand
        "vermilion": eccgui-create-color-tints(#ffd8cc #96290d),
        "grey": eccgui-create-color-tints(#eee #111),
    ),
    "extra": (
        "gold": eccgui-create-color-tints(#f7eab5 #c7a22b),
        "silver": eccgui-create-color-tints(#f9f9f9 #909090),
        "bronze": eccgui-create-color-tints(#fbe9db #cd7f32),
    ),
) !default;
