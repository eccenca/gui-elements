@use "sass:list";
@use "sass:color";
@use "sass:math";
@use "sass:meta";

/**
 * Always provide a list of 5 color tints.
 * If the list do not provide 5 colors then create them based on the first and last color in the list.
 */
@function eccgui-create-color-tints($colorset) {
    $colorset-steps: 5; // number of tints
    $count-colors: list.length($colorset);

    @if $count-colors == $colorset-steps {
        @return $colorset;
    }

    @if $count-colors < 1 {
        @error "Need at least 1 color to create color tints.";
    }

    // we asume that it correct to give only start and end of tint weights
    // only echo debug message if we have a 1, 3 or 4 color values
    @if $count-colors != 2 {
        @debug "Got only #{$count-colors} tints: #{$colorset}";
    }

    $color-tint-start: rgb(
        color.red(list.nth($colorset, 1)),
        color.green(list.nth($colorset, 1)),
        color.blue(list.nth($colorset, 1))
    );
    $color-tint-end: rgb(
        color.red(list.nth($colorset, -1)),
        color.green(list.nth($colorset, -1)),
        color.blue(list.nth($colorset, -1))
    );
    $colorset-fallback: $color-tint-start;

    @for $i from 2 to $colorset-steps {
        $tint-step: color.mix($color-tint-end, $color-tint-start, 100% * math.div($i - 1, $colorset-steps - 1));
        $colorset-fallback: list.append(
            $colorset-fallback,
            rgb(color.red($tint-step), color.green($tint-step), color.blue($tint-step))
        );

        // @debug("mix #{$color-tint-start} with #{$color-tint-end} by #{math.div($i - 1, $colorset-steps - 1)} -> #{rgb(color.red($tint-step), color.green($tint-step), color.blue($tint-step))}")
    }

    $colorset-fallback: list.append($colorset-fallback, $color-tint-end);

    @if $count-colors != 2 {
        @debug "Create fallback with #{$colorset-steps} tints: #{$colorset-fallback}";
    }

    @return $colorset-fallback;
}

/**
 * Create name for custom property.
 */
@function eccgui-color-name($group_or_name, $tint: null, $weight: null) {
    @if $group_or_name and $tint and $weight {
        @return "--#{$eccgui}-color-palette-#{$group_or_name}-#{$tint}-#{$weight}";
    } @else {
        @return "--#{$eccgui}-color-#{$group_or_name}";
    }
}

/**
 * Create custom property for palette color.
 */
@function eccgui-color-var($group_or_name, $tint: null, $weight: null) {
    @return var(#{eccgui-color-name($group_or_name, $tint, $weight)});
}

/**
 * Wraps the CSS color-mix function to control the color space on only one place.
 * TODO: move function to "better" place
 */
@function eccgui-color-mix($color1, $color2) {
    @return color-mix(in srgb, $color1, $color2);
}

/**
 * Similar to SCSS function rgba($color, $alpha).
 * Created to replace them easily for CSS custom properties.
 * TODO: move function to "better" place
 */
@function eccgui-color-rgba($color, $alpha) {
    @return eccgui-color-mix($color 100% * $alpha, transparent);
}

/**
 * Overwrite SCSS built-in rgba function to support colors by custom properties and CSS color methods.
 * TODO: we need to check if this is future proof, maybe this bahaviour is not planned by Dart Sass library.
 */
@function rgba($color, $alpha) {
    @if meta.type-of($color) == "color" {
        // value is SASS color value, we use SASS color functionality
        $alphacolor: color.change($color, $alpha: $alpha);

        @if $color == transparent {
            $alphacolor: transparent;
        }

        @debug "Color value $color is not defined by CSS custom property: rgba(#{$color}, #{$alpha}) -> #{$alphacolor}";
        @return $alphacolor;
    } @else {
        // value is not a SASS color value, we use CSS color method
        @return eccgui-color-rgba($color, $alpha);
    }
}

/**
 * Base definition for colors.
 * Can be overwritten if defined before this file is included.
 * You need to define all or nothing, we currently support overwriting it only partly.
 */

$eccgui-color-palette-light: (
    "identity": (
        "brand": eccgui-create-color-tints(#fae1cc #f8cd99 #f6b966 #f4a533 #f29100),
        "accent": eccgui-create-color-tints(#e5f4fb #aed1e5 #b0d0e3 #418ab9 #0a629b),
        "text": eccgui-create-color-tints(#f8f8f8 #d4d4d4 #353535 #2e2e2e #090909),
        "background": eccgui-create-color-tints(#fff #e8e8e8 #d6d6d6 #d4d4d4 #d3d3d3),
    ),
    "semantic": (
        "info": eccgui-create-color-tints(#e5f4fb #bad8e9 #bcd7e7 #418ab9 #0a67a3),
        "success": eccgui-create-color-tints(#e8f5e9 #b5cfb7 #66996f #4e8452 #103713),
        "warning": eccgui-create-color-tints(#fff3e0 #f9cba8 #e89158 #ec7a38 #672500),
        "danger": eccgui-create-color-tints(#fff5f6 #edbfc0 #a03b3b #c95253 #b71c1c),
    ),
    "layout": (
        "yellow": eccgui-create-color-tints(#fff6d5 #f1ecb5 #e3db79 #d4c93c #c1a500),
        "purple": eccgui-create-color-tints(#f0d5e8 #c8a2d1 #9d6eb8 #71378f #480e75),
        "magenta": eccgui-create-color-tints(#ffb4d1 #e88fb1 #d16b92 #ba4672 #59122d),
        "pink": eccgui-create-color-tints(#f7c9e0 #e6b4ce #d08aae #bb5f8e #711c4d),
        "violet": eccgui-create-color-tints(#e6c3e6 #bf95bf #995099 #732273 #570057),
        "indigo": eccgui-create-color-tints(#e0caf4 #b89ee0 #8f72c5 #6547aa #3b1e8f),
        "cyan": eccgui-create-color-tints(#b3ecf5 #99e3ef #41b6cc #33b6d0 #004a5b),
        "teal": eccgui-create-color-tints(#88c9be #7bc4bb #3e8f81 #3e9384 #104c42),
        "lime": eccgui-create-color-tints(#cde0d6 #b8d0b0 #90af7b #8daf65 #87b347),
        "amber": eccgui-create-color-tints(#ffe7b8 #ffe1ab #e5b45f #ffba5c #ef8f00),
        "vermilion": eccgui-create-color-tints(#ffd8cc #e5ac9c #cb816d #55291d #651c09),
        "grey": eccgui-create-color-tints(#f5f6f7 #b7b7b7 #808080 #484848 #1c2329),
    ),
    "extra": (
        "gold": eccgui-create-color-tints(#f7eab5 #ebd893 #dfc670 #d3b44e #c7a22b),
        "silver": eccgui-create-color-tints(#f9f9f9 #e6e6e6 #e7e7e7 #d8d8d8 #434343),
        "bronze": eccgui-create-color-tints(#fbe9db #f0cfb1 #e4b487 #d99a5c #d7985a),
    ),
) !default;
