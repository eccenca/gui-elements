// own vars
$eccgui-size-grid-gutter: $eccgui-size-block-whitespace !default;

// import lib requisits
@import "~carbon-components/scss/globals/scss/feature-flags";
@import "~carbon-components/scss/globals/scss/functions";
@import "~carbon-components/scss/globals/scss/mixins";
@import "~carbon-components/scss/globals/scss/vendor/@carbon/elements/scss/grid/mixins";
// overwrite lib vars
$carbon--grid-gutter: carbon--rem($eccgui-size-grid-gutter);
// load grid
@include exports("grid") {
    @include carbon--grid();
}

// adjustments

.#{$prefix}--grid {
    padding-left: 0;
    padding-right: 0;
}

.#{$prefix}--grid--full-width {
    max-width: 100%;
    width: 100%;
}

.#{$eccgui}-grid--stretchable {
    display: flex;
    flex-direction: column;
    width: auto;

    & > .#{$prefix}--row {
        flex-grow: 0;
        flex-shrink: 0;
    }
}

.#{$prefix}--row {
    flex-wrap: wrap;
}

.#{$eccgui}-grid__row--fullheight {
    min-height: calc(100vh - #{2 * $eccgui-size-block-whitespace});

    .#{$prefix}--header ~ .#{$prefix}--content & {
        min-height: calc(100vh - #{mini-units(8)} - #{2 * $eccgui-size-block-whitespace});
    }
}

.#{$eccgui}-grid__row--stretched {

    .#{$eccgui}-grid--stretchable > & {
        flex-grow: 1;
        flex-shrink: 1;
    }

    & > .#{$eccgui}-grid__column {
        overflow-y: auto;
    }
}

.#{$prefix}--col {
    /*
        We need to explicitely remove a minimum width from flex layout columns,
        otherwise they try to grow (if allowed) until every text can be shown
        without overflowing, even if text is styled to be hidden overflowed.

        @see https://css-tricks.com/flexbox-truncated-text/
    */
    min-width: 0;
}

.#{$eccgui}-grid__column--vertical-center {
    align-self: center;
}

.#{$eccgui}-grid__row--wrapcolumns {
    flex-wrap: nowrap;
}
